#!/bin/bash

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
DIM='\033[2m'
ITALIC='\033[3m'
UNDERLINE='\033[4m'
NC='\033[0m'

# Symboles
CHECK="✓"
CROSS="✗"
ARROW="➜"
DOT="•"
STAR="★"
DIAMOND="♦"

# Fonction pour afficher un titre de section
function print_section_title() {
    local title=$1
    local width=50
    local padding=$(( (width - ${#title}) / 2 ))
    echo
    echo -e "${CYAN}╭$(printf '─%.0s' $(seq 1 $width))╮${NC}"
    echo -e "${CYAN}│${NC}$(printf ' %.0s' $(seq 1 $padding))${BOLD}${WHITE}${title}${NC}$(printf ' %.0s' $(seq 1 $((padding + (width - ${#title}) % 2))))${CYAN}│${NC}"
    echo -e "${CYAN}╰$(printf '─%.0s' $(seq 1 $width))╯${NC}"
    echo
}

# Logo ASCII avec couleurs et cadre
function print_logo() {
    local width=45
    echo -e "${CYAN}╔$(printf '═%.0s' $(seq 1 $width))╗${NC}"
    echo -e "${CYAN}║${NC}$(printf ' %.0s' $(seq 1 $width))${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}   ${BOLD}${BLUE}______     ______           __${NC}         ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${BOLD}${BLUE}/ ____/____/ __/ /_  ____ _/ /_${NC}        ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC} ${BOLD}${BLUE}/ / __/ ___/ /_/ __ \/ __ \`/ __/${NC}        ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}${BOLD}${BLUE}/ /_/ / /  / __/ /_/ / /_/ / /_${NC}          ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}${BOLD}${BLUE}\____/_/  /_/ /_.___/\__,_/\__/${NC}   ${GREEN}by Tom${NC}    ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}$(printf ' %.0s' $(seq 1 $width))${CYAN}║${NC}"
    echo -e "${CYAN}╚$(printf '═%.0s' $(seq 1 $width))╝${NC}"
    echo
}

# Fonction pour afficher une option de menu
function print_menu_option() {
    local number=$1
    local text=$2
    local default=$3
    echo -e "${CYAN}${STAR}${NC} ${BOLD}${number}.${NC} ${text}${default:+ ${DIM}[${default}]${NC}}"
}

# Fonction pour afficher les messages d'erreur
function error_msg() {
    echo -e "\n${RED}${CROSS} Erreur: ${BOLD}$1${NC}\n"
}

# Fonction pour afficher les messages de succès
function success_msg() {
    echo -e "\n${GREEN}${CHECK} Succès: ${BOLD}$1${NC}\n"
}

# Fonction pour afficher les avertissements
function warning_msg() {
    echo -e "\n${YELLOW}${DOT} Attention: ${BOLD}$1${NC}\n"
}

# Fonction pour afficher les informations
function info_msg() {
    echo -e "\n${BLUE}${ARROW} Info: ${BOLD}$1${NC}\n"
}

# Fonction pour vérifier si une commande a réussi
function check_command() {
    if [ $? -ne 0 ]; then
        error_msg "$1"
        return 1
    fi
    return 0
}

# Fonction pour lire l'entrée avec option de retour
function read_input() {
    local prompt=$1
    local var_name=$2
    while true; do
        read -p "$prompt (r pour retour): " input
        if [ "$input" = "r" ]; then
            return 1
        fi
        eval "$var_name='$input'"
        return 0
    done
}

# Fonction pour créer le .gitignore par défaut
function create_gitignore() {
    if [ ! -f ".gitignore" ]; then
        cat > .gitignore << 'EOL'
.DS_Store
*.log
*.tmp
EOL
        success_msg "Fichier .gitignore créé avec les règles par défaut."
    fi
}

# Fonction pour cloner un repository
function clone_repository() {
    read_input "Entrez l'URL du repository à cloner" clone_url
    if [ $? -eq 1 ]; then
        return 1
    fi
    
    git clone "$clone_url" .
    if ! check_command "Impossible de cloner le repository."; then
        return 1
    fi
    success_msg "Repository cloné avec succès."
    create_gitignore
    return 0
}

# Fonction pour initialiser Git si nécessaire
function init_git() {
    echo "Initialisation du dépôt Git..."
    git init
    if ! check_command "Impossible d'initialiser le dépôt Git."; then
        return 1
    fi
    success_msg "Dépôt Git initialisé avec succès."
    
    # Créer le .gitignore
    create_gitignore
    
    while true; do
        print_section_title "Configuration du Remote"
        echo -e "${WHITE}${BOLD}Voulez-vous configurer un remote ?${NC}\n"
        print_menu_option "1" "Oui" "défaut"
        print_menu_option "2" "Non"
        echo
        
        read_input "Choisissez une option (1/2)" config_remote
        if [ $? -eq 1 ]; then
            return 1
        fi
        
        config_remote=${config_remote:-1}
        
        if [ "$config_remote" = "1" ]; then
            read_input "Entrez l'URL du remote (ex: https://github.com/user/repo.git)" remote_url
            if [ $? -eq 1 ]; then
                continue
            fi
            
            # Vérifier si le remote existe déjà
            if git remote | grep -q "^origin$"; then
                warning_msg "Le remote 'origin' existe déjà."
                echo -e "\n${WHITE}${BOLD}Voulez-vous le remplacer ?${NC}\n"
                print_menu_option "1" "Oui"
                print_menu_option "2" "Non"
                echo
                
                read_input "Choisissez une option (1/2)" replace_remote
                if [ $? -eq 1 ]; then
                    continue
                fi
                if [ "$replace_remote" = "1" ]; then
                    git remote remove origin
                else
                    continue
                fi
            fi
            
            git remote add origin "$remote_url"
            if ! check_command "Impossible d'ajouter le remote."; then
                continue
            fi
            success_msg "Remote configuré avec succès."
        fi
        break
    done
    return 0
}

# Fonction pour gérer l'initialisation ou le clonage
function setup_git() {
    print_section_title "Configuration Git"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Cloner un repository"
    print_menu_option "2" "Initialiser un nouveau dépôt Git" "défaut"
    echo
    
    read_input "Choisissez une option (1/2)" choice
    if [ $? -eq 1 ]; then
        return 1
    fi
    
    choice=${choice:-2}
    if [ "$choice" = "1" ]; then
        clone_repository
    else
        init_git
    fi
    return 0
}

# Fonction pour vérifier les modifications
function check_changes() {
    if [ -z "$(git status --porcelain)" ]; then
        error_msg "Aucune modification à commiter."
        return 1
    fi
    return 0
}

# Fonction pour ajouter les fichiers
function add_files() {
    # Vérifier si on est dans un repo git
    if [ ! -d ".git" ]; then
        error_msg "Pas de dépôt Git trouvé"
        return 1
    fi

    # Vérifier s'il y a des modifications
    if ! check_changes; then
        return 1
    fi

    while true; do
        print_section_title "Ajout de fichiers"
        echo -e "${WHITE}${BOLD}Que voulez-vous ajouter ?${NC}\n"
        print_menu_option "1" "Tout ajouter (git add .)" "défaut"
        print_menu_option "2" "Sélectionner des fichiers spécifiques"
        echo
        
        read_input "Choisissez une option (1/2)" option
        if [ $? -eq 1 ]; then
            return 1
        fi
        
        option=${option:-1}

        if [ "$option" = "1" ]; then
            info_msg "Ajout de tous les fichiers..."
            git add .
            if ! check_command "Impossible d'ajouter les fichiers."; then
                continue
            fi
            success_msg "Tous les fichiers ont été ajoutés"
            break
        elif [ "$option" = "2" ]; then
            echo -e "\n${WHITE}${BOLD}Voici les fichiers modifiés:${NC}"
            echo -e "${DIM}$(git status -s)${NC}"
            echo
            
            read_input "Entrez les numéros des fichiers à ajouter (ex: 1 2 3)" files
            if [ $? -eq 1 ]; then
                continue
            fi
            
            # Vérifier si la sélection est valide
            total_files=$(git status -s | wc -l)
            for file in $files; do
                if ! [[ "$file" =~ ^[0-9]+$ ]] || [ "$file" -gt "$total_files" ] || [ "$file" -lt 1 ]; then
                    error_msg "Sélection invalide: $file"
                    continue 2
                fi
            done
            
            for file in $files; do
                file_path=$(sed -n "${file}p" <<< "$(git status -s | cut -c4-)")
                info_msg "Ajout de $file_path..."
                git add "$file_path"
                if ! check_command "Impossible d'ajouter le fichier: $file_path"; then
                    continue 2
                fi
            done
            success_msg "Les fichiers sélectionnés ont été ajoutés"
            break
        else
            error_msg "Option invalide"
            continue
        fi
    done
    return 0
}

# Fonction pour vérifier si les fichiers sont stagés
function check_staged() {
    if [ -z "$(git diff --cached --name-only)" ]; then
        error_msg "Aucun fichier n'est stagé pour le commit."
        return 1
    fi
    return 0
}

# Fonction pour choisir le type de commit
function choose_commit_type() {
    while true; do
        print_section_title "Type de Commit"
        echo -e "${WHITE}${BOLD}Choisissez le type de votre commit :${NC}\n"
        print_menu_option "1" "${MAGENTA}feat${NC} : Nouvelle fonctionnalité"
        print_menu_option "2" "${RED}fix${NC} : Correction de bug"
        print_menu_option "3" "${BLUE}docs${NC} : Modification de la documentation"
        print_menu_option "4" "${CYAN}style${NC} : Formatage du code"
        print_menu_option "5" "${YELLOW}refactor${NC} : Restructuration du code"
        print_menu_option "6" "${GREEN}test${NC} : Ajout ou modification de tests"
        print_menu_option "7" "${WHITE}chore${NC} : Tâches diverses"
        echo
        
        read_input "Choisissez une option (1/2/3/4/5/6/7)" commit_type
        if [ $? -eq 1 ]; then
            return 1
        fi
        
        case $commit_type in
            1) type="feat" ;;
            2) type="fix" ;;
            3) type="docs" ;;
            4) type="style" ;;
            5) type="refactor" ;;
            6) type="test" ;;
            7) type="chore" ;;
            *) error_msg "Option invalide" ; continue ;;
        esac
        
        read_input "Entrez le scope (optionnel, appuyez sur Entrée pour ignorer)" scope
        if [ $? -eq 1 ]; then
            return 1
        fi
        
        read_input "Entrez la description du commit" description
        if [ $? -eq 1 ]; then
            return 1
        fi
        
        # Construire le message de commit
        if [ -n "$scope" ]; then
            commit_msg="$type($scope) $description"
        else
            commit_msg="$type: $description"
        fi
        
        return 0
    done
}

# Fonction pour commit
function commit_changes() {
    # Vérifier si des fichiers sont stagés
    if ! check_staged; then
        return 1
    fi
    
    # Choisir le type de commit et construire le message
    if ! choose_commit_type; then
        return 1
    fi
    
    # Effectuer le commit
    git commit -m "$commit_msg"
    if ! check_command "Impossible de créer le commit."; then
        return 1
    fi
    
    success_msg "Commit créé avec succès."
    return 0
}

# Fonction pour vérifier si le remote existe
function check_remote() {
    if ! git remote | grep -q "^origin$"; then
        error_msg "Aucun remote 'origin' configuré."
        return 1
    fi
    return 0
}

# Fonction pour push
function push_changes() {
    # Vérifier si le remote existe
    if ! check_remote; then
        return 1
    fi
    
    while true; do
        # Essayer de push
        if git push origin HEAD; then
            success_msg "Push réussi."
            return 0
        else
            # En cas d'erreur, proposer des options
            print_section_title "Erreur de Push"
            echo -e "${WHITE}${BOLD}Erreur lors du push. Que voulez-vous faire ?${NC}\n"
            print_menu_option "1" "Réessayer"
            print_menu_option "2" "Pull puis Push (avec rebase)"
            print_menu_option "3" "Force Push (ATTENTION: peut écraser les changements distants)"
            print_menu_option "4" "Annuler"
            echo
            
            read_input "Choisissez une option (1/2/3/4)" push_option
            if [ $? -eq 1 ]; then
                return 1
            fi
            
            case $push_option in
                1) continue ;;
                2)
                    git pull --rebase origin HEAD
                    if ! check_command "Impossible de pull les changements."; then
                        continue
                    fi
                    ;;
                3)
                    warning_msg "Le force push peut écraser les changements distants!"
                    read_input "Êtes-vous sûr ? (oui/non)" confirm_force
                    if [ $? -eq 1 ] || [ "$confirm_force" != "oui" ]; then
                        continue
                    fi
                    git push -f origin HEAD
                    if ! check_command "Force push échoué."; then
                        continue
                    fi
                    success_msg "Force push réussi."
                    return 0
                    ;;
                4) return 1 ;;
                *) error_msg "Option invalide." ; continue ;;
            esac
        fi
    done
}

# Fonction pour vérifier si le dossier est vide (en ignorant .git)
function is_directory_empty() {
    [ -z "$(ls -A | grep -v '^\.git$')" ]
}

# Fonction pour afficher le menu principal
function show_main_menu() {
    while true; do
        print_section_title "Menu Principal GFast"
        echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
        print_menu_option "1" "Initialiser/Cloner un dépôt"
        print_menu_option "2" "Gérer les fichiers (add/status)"
        print_menu_option "3" "Créer un commit"
        print_menu_option "4" "Gérer les branches"
        print_menu_option "5" "Synchroniser (push/pull)"
        print_menu_option "6" "Voir l'historique"
        print_menu_option "7" "Configuration Git"
        print_menu_option "8" "Gérer les stash"
        print_menu_option "9" "Gérer les clés SSH"
        print_menu_option "h" "Aide"
        print_menu_option "q" "Quitter"
        echo

        read_input "Choisissez une option" choice
        case $choice in
            1) setup_git ;;
            2) add_files ;;
            3) commit_changes ;;
            4) manage_branches ;;
            5) sync_changes ;;
            6) view_history ;;
            7) configure_git ;;
            8) manage_stash ;;
            9) manage_ssh ;;
            h|H) show_help ;;
            q|Q) exit 0 ;;
            *) error_msg "Option invalide" ;;
        esac
    done
}

# Fonction pour gérer les branches
function manage_branches() {
    print_section_title "Gestion des Branches"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Lister les branches"
    print_menu_option "2" "Créer une nouvelle branche"
    print_menu_option "3" "Changer de branche"
    print_menu_option "4" "Fusionner une branche"
    print_menu_option "5" "Supprimer une branche"
    print_menu_option "r" "Retour"
    echo

    read_input "Choisissez une option" choice
    case $choice in
        1) git branch -a ;;
        2) 
            read_input "Nom de la nouvelle branche" branch_name
            [ $? -eq 0 ] && git checkout -b "$branch_name"
            ;;
        3)
            echo -e "\n${WHITE}${BOLD}Branches disponibles :${NC}"
            git branch
            read_input "Nom de la branche" branch_name
            [ $? -eq 0 ] && git checkout "$branch_name"
            ;;
        4)
            echo -e "\n${WHITE}${BOLD}Branches disponibles :${NC}"
            git branch
            read_input "Nom de la branche à fusionner" branch_name
            [ $? -eq 0 ] && git merge "$branch_name"
            ;;
        5)
            echo -e "\n${WHITE}${BOLD}Branches disponibles :${NC}"
            git branch
            read_input "Nom de la branche à supprimer" branch_name
            [ $? -eq 0 ] && git branch -d "$branch_name"
            ;;
        r|R) return 0 ;;
        *) error_msg "Option invalide" ;;
    esac
}

# Fonction pour synchroniser les changements
function sync_changes() {
    print_section_title "Synchronisation"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Push les changements"
    print_menu_option "2" "Pull les changements"
    print_menu_option "3" "Voir le statut de synchronisation"
    print_menu_option "r" "Retour"
    echo

    read_input "Choisissez une option" choice
    case $choice in
        1) push_changes ;;
        2) git pull ;;
        3) git status ;;
        r|R) return 0 ;;
        *) error_msg "Option invalide" ;;
    esac
}

# Fonction pour voir l'historique
function view_history() {
    print_section_title "Historique"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Voir tous les commits"
    print_menu_option "2" "Voir les derniers commits"
    print_menu_option "3" "Chercher dans l'historique"
    print_menu_option "r" "Retour"
    echo

    read_input "Choisissez une option" choice
    case $choice in
        1) git log --oneline --graph --all ;;
        2) git log -n 5 --oneline ;;
        3)
            read_input "Terme à rechercher" search_term
            [ $? -eq 0 ] && git log --grep="$search_term"
            ;;
        r|R) return 0 ;;
        *) error_msg "Option invalide" ;;
    esac
}

# Fonction pour configurer Git
function configure_git() {
    print_section_title "Configuration Git"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Voir la configuration actuelle"
    print_menu_option "2" "Configurer le nom d'utilisateur"
    print_menu_option "3" "Configurer l'email"
    print_menu_option "4" "Éditer .gitignore"
    print_menu_option "r" "Retour"
    echo

    read_input "Choisissez une option" choice
    case $choice in
        1) git config --list ;;
        2)
            read_input "Nouveau nom d'utilisateur" username
            [ $? -eq 0 ] && git config --global user.name "$username"
            ;;
        3)
            read_input "Nouvel email" email
            [ $? -eq 0 ] && git config --global user.email "$email"
            ;;
        4) ${EDITOR:-nano} .gitignore ;;
        r|R) return 0 ;;
        *) error_msg "Option invalide" ;;
    esac
}

# Fonction pour afficher l'aide
function show_help() {
    print_section_title "Aide GFast"
    cat << EOF
${WHITE}${BOLD}GFast - Assistant Git Rapide${NC}

${CYAN}${BOLD}Commandes principales :${NC}
• Initialisation : Créer ou cloner un dépôt Git
• Fichiers : Ajouter et gérer les fichiers
• Commit : Créer des commits avec convention
• Branches : Gérer les branches Git
• Sync : Synchroniser avec le dépôt distant
• Historique : Voir et chercher dans l'historique
• Config : Configurer Git

${YELLOW}${BOLD}Astuces :${NC}
• Utilisez 'r' pour revenir au menu précédent
• Utilisez 'q' pour quitter le programme
• Les options par défaut sont indiquées entre []

${GREEN}${BOLD}Pour plus d'aide :${NC}
• Documentation Git : https://git-scm.com/doc
• Guide Git : https://git-scm.com/book
EOF
}

# Fonction pour gérer les stash
function manage_stash() {
    print_section_title "Gestion des Stash"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Voir la liste des stash"
    print_menu_option "2" "Créer un nouveau stash"
    print_menu_option "3" "Appliquer un stash"
    print_menu_option "4" "Supprimer un stash"
    print_menu_option "5" "Voir le contenu d'un stash"
    print_menu_option "r" "Retour"
    echo

    read_input "Choisissez une option" choice
    case $choice in
        1) 
            echo -e "\n${WHITE}${BOLD}Liste des stash :${NC}"
            git stash list
            ;;
        2)
            read_input "Message pour le stash (optionnel)" message
            if [ $? -eq 0 ]; then
                if [ -n "$message" ]; then
                    git stash push -m "$message"
                else
                    git stash push
                fi
                success_msg "Stash créé avec succès"
            fi
            ;;
        3)
            echo -e "\n${WHITE}${BOLD}Liste des stash :${NC}"
            git stash list
            read_input "Index du stash à appliquer (ex: 0 pour stash@{0})" index
            if [ $? -eq 0 ]; then
                git stash apply "stash@{$index}"
                success_msg "Stash appliqué avec succès"
            fi
            ;;
        4)
            echo -e "\n${WHITE}${BOLD}Liste des stash :${NC}"
            git stash list
            read_input "Index du stash à supprimer (ex: 0 pour stash@{0})" index
            if [ $? -eq 0 ]; then
                git stash drop "stash@{$index}"
                success_msg "Stash supprimé avec succès"
            fi
            ;;
        5)
            echo -e "\n${WHITE}${BOLD}Liste des stash :${NC}"
            git stash list
            read_input "Index du stash à voir (ex: 0 pour stash@{0})" index
            if [ $? -eq 0 ]; then
                git stash show -p "stash@{$index}"
            fi
            ;;
        r|R) return 0 ;;
        *) error_msg "Option invalide" ;;
    esac
}

# Fonction pour gérer les clés SSH
function manage_ssh() {
    print_section_title "Gestion des Clés SSH"
    echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
    print_menu_option "1" "Lister les clés SSH"
    print_menu_option "2" "Générer une nouvelle clé SSH"
    print_menu_option "3" "Ajouter une clé à l'agent SSH"
    print_menu_option "4" "Copier une clé publique"
    print_menu_option "5" "Tester la connexion SSH"
    print_menu_option "r" "Retour"
    echo

    read_input "Choisissez une option" choice
    case $choice in
        1)
            echo -e "\n${WHITE}${BOLD}Clés SSH existantes :${NC}"
            ls -l ~/.ssh/*.pub 2>/dev/null || echo "Aucune clé publique trouvée"
            ;;
        2)
            read_input "Votre email" email
            if [ $? -eq 0 ]; then
                read_input "Nom du fichier de clé (ex: id_ed25519)" keyname
                if [ $? -eq 0 ]; then
                    # Utiliser Ed25519 par défaut (plus sécurisé que RSA)
                    ssh-keygen -t ed25519 -C "$email" -f ~/.ssh/"$keyname"
                    success_msg "Clé SSH générée avec succès"
                    
                    # Démarrer l'agent SSH si nécessaire
                    eval "$(ssh-agent -s)"
                    ssh-add ~/.ssh/"$keyname"
                    
                    # Afficher la clé publique
                    echo -e "\n${WHITE}${BOLD}Votre clé publique :${NC}"
                    cat ~/.ssh/"$keyname".pub
                fi
            fi
            ;;
        3)
            echo -e "\n${WHITE}${BOLD}Clés SSH disponibles :${NC}"
            ls -l ~/.ssh/*pub 2>/dev/null
            read_input "Nom du fichier de clé privée à ajouter" keyfile
            if [ $? -eq 0 ]; then
                eval "$(ssh-agent -s)"
                ssh-add ~/.ssh/"$keyfile"
                success_msg "Clé ajoutée à l'agent SSH"
            fi
            ;;
        4)
            echo -e "\n${WHITE}${BOLD}Clés publiques disponibles :${NC}"
            ls -l ~/.ssh/*.pub 2>/dev/null
            read_input "Nom du fichier de clé publique à copier" keyfile
            if [ $? -eq 0 ] && [ -f ~/.ssh/"$keyfile" ]; then
                if command -v pbcopy >/dev/null; then
                    cat ~/.ssh/"$keyfile" | pbcopy
                    success_msg "Clé copiée dans le presse-papier"
                else
                    echo -e "\n${WHITE}${BOLD}Votre clé publique :${NC}"
                    cat ~/.ssh/"$keyfile"
                fi
            fi
            ;;
        5)
            read_input "Hôte SSH à tester (ex: github.com)" host
            if [ $? -eq 0 ]; then
                ssh -T git@"$host"
            fi
            ;;
        r|R) return 0 ;;
        *) error_msg "Option invalide" ;;
    esac
}

# Fonction pour afficher l'aide rapide
function show_quick_help() {
    echo -e "
${WHITE}${BOLD}GFast - Git en plus rapide${NC}

${CYAN}${BOLD}Commandes :${NC}
  ${GREEN}gf${NC}              Affiche ce message d'aide
  ${GREEN}gf -s${NC}           Start : Initialiser ou cloner un projet
  ${GREEN}gf -p${NC}           Push : Ajouter, commit et push rapide
  ${GREEN}gf -f${NC}           Fix : Gérer les branches, pull et historique
  ${GREEN}gf -c${NC}           Config : Gérer la configuration et les clés SSH

${CYAN}${BOLD}Exemples d'utilisation :${NC}
  ${YELLOW}1. Démarrer un projet :${NC}
     gf -s

  ${YELLOW}2. Push rapide :${NC}
     gf -p

  ${YELLOW}3. Fix et maintenance :${NC}
     gf -f

  ${YELLOW}4. Configuration :${NC}
     gf -c"
}

# Fonction pour le workflow de push rapide
function quick_push_workflow() {
    # Ajouter les fichiers
    print_section_title "Ajout des fichiers"
    git add .
    success_msg "Fichiers ajoutés au staging"

    # Commit
    print_section_title "Création du commit"
    read_input "Message du commit" commit_msg
    if [ $? -eq 0 ]; then
        git commit -m "$commit_msg"
        success_msg "Commit créé"

        # Vérifier si on est sur main/master
        current_branch=$(git branch --show-current)
        if [[ "$current_branch" == "main" || "$current_branch" == "master" ]]; then
            read_input "Vous êtes sur $current_branch. Créer une nouvelle branche ? (o/N)" create_branch
            if [ $? -eq 0 ] && [[ "$create_branch" == "o" || "$create_branch" == "O" ]]; then
                read_input "Nom de la nouvelle branche" branch_name
                if [ $? -eq 0 ]; then
                    git checkout -b "$branch_name"
                    success_msg "Branche $branch_name créée et activée"
                fi
            fi
        fi

        # Push
        git push origin HEAD
        success_msg "Push effectué avec succès"
    fi
}

# Fonction pour le workflow de fix
function fix_workflow() {
    while true; do
        print_section_title "Menu Fix"
        echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
        print_menu_option "1" "Gérer les branches"
        print_menu_option "2" "Pull les changements"
        print_menu_option "3" "Voir l'historique"
        print_menu_option "4" "Gérer les stash"
        print_menu_option "q" "Quitter"
        echo

        read_input "Choisissez une option" choice
        case $choice in
            1) manage_branches ;;
            2) git pull ;;
            3) view_history ;;
            4) manage_stash ;;
            q|Q) return 0 ;;
            *) error_msg "Option invalide" ;;
        esac
    done
}

# Fonction pour le workflow de configuration
function config_workflow() {
    while true; do
        print_section_title "Menu Configuration"
        echo -e "${WHITE}${BOLD}Que souhaitez-vous faire ?${NC}\n"
        print_menu_option "1" "Configuration Git"
        print_menu_option "2" "Gérer les clés SSH"
        print_menu_option "q" "Quitter"
        echo

        read_input "Choisissez une option" choice
        case $choice in
            1) configure_git ;;
            2) manage_ssh ;;
            q|Q) return 0 ;;
            *) error_msg "Option invalide" ;;
        esac
    done
}

# Fonction principale modifiée
function main() {
    # Si aucun argument, lancer le menu interactif
    if [ $# -eq 0 ]; then
        show_quick_help
        return 0
    fi

    case "$1" in
        -h|--help)
            show_quick_help
            ;;
        -s|--start)
            setup_git
            ;;
        -p|--push)
            quick_push_workflow
            ;;
        -f|--fix)
            fix_workflow
            ;;
        -c|--config)
            config_workflow
            ;;
        *)
            error_msg "Option invalide"
            show_quick_help
            return 1
            ;;
    esac

    return 0
}

# Lancer le script avec les arguments
print_logo
main "$@"